
import [balsa.types.basic]

type Hash is array 8 of cardinal
type Digest is array 32 of byte 
type Block is array 64 of byte

function SHFR_3(x : cardinal) = (#x[0..31 - 3] as cardinal)
function SHFR_10(x : cardinal) = (#x[0..31 - 10] as cardinal)

function ROTR_2(x : cardinal) = ((#x[0..31 - 2] as cardinal) or (#x[31-2..31] as cardinal))
function ROTR_3(x : cardinal) = ((#x[0..31 - 3] as cardinal) or (#x[31-3..31] as cardinal))
function ROTR_6(x : cardinal) = ((#x[0..31 - 6] as cardinal) or (#x[31-6..31] as cardinal))
function ROTR_7(x : cardinal) = ((#x[0..31 - 7] as cardinal) or (#x[31-7..31] as cardinal))
function ROTR_10(x : cardinal) = ((#x[0..31 - 10] as cardinal) or (#x[31-10..31] as cardinal))
function ROTR_11(x : cardinal) = ((#x[0..31 - 11] as cardinal) or (#x[31-11..31] as cardinal))
function ROTR_13(x : cardinal) = ((#x[0..31 - 13] as cardinal) or (#x[31-13..31] as cardinal))
function ROTR_17(x : cardinal) = ((#x[0..31 - 17] as cardinal) or (#x[31-17..31] as cardinal))
function ROTR_18(x : cardinal) = ((#x[0..31 - 18] as cardinal) or (#x[31-18..31] as cardinal))
function ROTR_19(x : cardinal) = ((#x[0..31 - 19] as cardinal) or (#x[31-19..31] as cardinal))
function ROTR_22(x : cardinal) = ((#x[0..31 - 22] as cardinal) or (#x[31-22..31] as cardinal))
function ROTR_25(x : cardinal) = ((#x[0..31 - 25] as cardinal) or (#x[31-25..31] as cardinal))

function F1(x : cardinal) = ROTR_2(x) xor ROTR_13(x) xor ROTR_22(x)
function F2(x : cardinal) = ROTR_6(x) xor ROTR_11(x) xor ROTR_25(x)
function F3(x : cardinal) = ROTR_7(x) xor ROTR_18(x) xor ROTR_3(x)
function F4(x : cardinal) = ROTR_17(x) xor ROTR_19(x) xor ROTR_10(x)

function CH(x : cardinal; y : cardinal; z : cardinal) = (x and y) xor (not x and z)
function MAJ(x : cardinal; y : cardinal; z : cardinal) = (x and y) xor (x and z) xor (y and z)

function mod_block_size(x : long) = (x as 6 bits) : 6 bits

function data_length_block(size : long) = (#size @ #(0 as 3 bits) as array 4 of byte)

constant sha256_k = {
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
} : array 64 of cardinal

constant initial_digest = {
  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
  0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
} : Hash

procedure sha256_transform(input current_hash : Hash;
                           input block : Block;
                           output next_hash : Hash) is
  variable block_b: Block
  variable w : array 64 of cardinal
  variable current_hash_b : array 8 of cardinal
  variable wv : array 8 of cardinal
  variable t1, t2 : cardinal
begin
  current_hash -> wv;
  current_hash -> current_hash_b;
  block -> block_b;
  for || i in 0..15 then
    w[i] := (#(block_b[i * 4 + 0]) @
             #(block_b[i * 4 + 1]) @
             #(block_b[i * 4 + 2]) @
             #(block_b[i * 4 + 3]) as cardinal)
  end;
  for ; i in 16..63 then
    w[i] := (F4(w[i- 2]) + w[i- 7] + F3(w[i-15]) + w[i-16] as cardinal)
  end;
  for ; i in 0..16 then
    t1 := 0 || t2 := 0;
    wv[7] := wv[6];
    wv[6] := wv[5];
    wv[5] := wv[4];
    wv[4] := (wv[3] + t1 as cardinal);
    wv[3] := wv[2];
    wv[2] := wv[1];
    wv[1] := wv[0];
    wv[0] := (t1 + t2 as cardinal)
  end;
  for || i in 0..7 then
    current_hash_b[i] := (current_hash_b[i] + wv[i] as cardinal)
  end;
  next_hash <- current_hash_b
end

procedure sha256(input data : byte;
                 output digest : Digest;
                 sync out) is

  variable data_length : long
  variable hash : Hash
  variable block : Block
  variable next_hash : Hash
  variable digest_b : Digest
  variable length_block : array 4 of byte
begin
  loop
    select data then
      block[mod_block_size(data_length)] := data;
      data_length := (data_length + 1 as long);
      if mod_block_size(data_length) = 0 then
        sha256_transform(->hash, ->block, ->next_hash);
        hash := next_hash ||
        block := (0 as Block)
      end;
      hash := (0 as Hash)
    | out then
      block[mod_block_size(data_length)] := 0x80;
      if (block[mod_block_size(data_length)] + 1 <= 64) and
         (block[mod_block_size(data_length)] + 9 > 64) then
        local
          variable next_hash : Hash
        begin
          sha256_transform(->hash, ->block, ->next_hash);
          hash := next_hash ||
          block := (0 as Block)
        end
      end; -- if
      length_block := data_length_block(data_length);
      for || i in 0..3 then
        block[60 + i] := length_block[i]
      end;
      sha256_transform(->hash, ->block, ->next_hash);
      hash := next_hash ||
      block := (0 as Block);
      for ; i in 0..7 then
        digest_b[i*4+0] := (#hash[i] as byte);
        digest_b[i*4+1] := (#(0 as 8 bits) @ #(hash[i]) as byte);
        digest_b[i*4+2] := (#(0 as 16 bits) @ #(hash[i]) as byte);
        digest_b[i*4+3] := (#(0 as 24 bits) @ #(hash[i]) as byte)
      end;
      digest <- digest_b
    end
  end
end
