import [balsa.types.basic]

constant Width = 16
type In is Width signed bits
type Out is (Width + Width) signed bits
type Buf is (Width + Width + 1) signed bits

procedure booth_mul(input x: In ;
                    input y: In ;
                    output z: Out) is
  variable m: In 
  variable r: In 
  variable a: Buf
  variable b: Buf
  variable p: Buf
begin
   loop
    x -> m || y -> r ;
    a := (#0 @ #(0 as In) @ #m as Buf) || 
    b := (#0 @ #(0 as In) @ #-m as Buf) ||
    p := (#0 @ #r as Buf) ;

    for ; i in 0 .. Width - 1 then
      if #p[1] = 0 and #p[0] = 1 then
        p := (#(p + a)[1 .. Width + Width] @ #(#(p + a)[Width + Width]) as Buf)
      |  #p[1] = 1 and #p[0] = 0 then
        p := (#(p + b)[1 .. Width + Width] @ #(#(p + b)[Width + Width]) as Buf)
      else
        p := (#p[1 .. Width + Width] @ #(#p[Width + Width]) as Buf)
      end
    end ; -- for ; i
    z <- (#p[1..Width + Width] as Out)
   end
end
